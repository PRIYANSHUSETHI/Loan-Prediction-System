# -*- coding: utf-8 -*-
"""LOAN_PREDICTION_SYSTEM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JrmmxxfwnfyDItctHcMQ-Q7PYTIMT3EZ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import svm

df = pd.read_excel("Copy of loan.xlsx")
df.head()

df.info()

df.isnull().sum()

df["loanamount_log"] = np.log(df["LoanAmount"])
df["loanamount_log"].hist(bins = 20)

df.isnull().sum()

df['totalincome'] = df['ApplicantIncome'] + df['CoapplicantIncome']
df['totalincome_log'] = np.log(df['totalincome'])
df['totalincome_log'].hist(bins = 20)

df['Gender'].fillna(df['Gender'].mode()[0], inplace = True)
df['Married'].fillna(df['Married'].mode()[0], inplace = True)
df['Dependents'].fillna(df['Dependents'].mode()[0], inplace = True)
df['Self_Employed'].fillna(df['Self_Employed'].mode()[0], inplace = True)

df.LoanAmount = df.LoanAmount.fillna(df.LoanAmount.mean())
df.loanamount_log = df.loanamount_log.fillna(df.loanamount_log.mean())

df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0], inplace = True)
df['Credit_History'].fillna(df['Credit_History'].mode()[0], inplace = True)

df.isnull().sum()

x = df.iloc[:,np.r_[1:5,9:11,13:15]].values
y = df.iloc[:,12].values
x
y

print("no. of people who take loan, grouped by gender:")
print(df['Gender'].value_counts())
sns.countplot(x = 'Gender', data = df)

print("no. of people who take loan, grouped by their marital status:")
print(df['Married'].value_counts())
sns.countplot(x = 'Married', data = df)

print("no. of people who take loan, grouped by no. of Dependents:")
print(df['Dependents'].value_counts())
sns.countplot(x = 'Dependents', data = df)

print("no. of people who take loan, grouped as self-employed:")
print(df['Self_Employed'].value_counts())
sns.countplot(x = 'Self_Employed', data = df)

print("no. of people who take loan, grouped by loan amount:")
print(df['LoanAmount'].value_counts())
sns.countplot(x = 'LoanAmount', data = df)

print("no. of people who take loan, grouped by credit history:")
print(df['Credit_History'].value_counts())
sns.countplot(x = 'Credit_History', data = df)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

from sklearn.preprocessing import LabelEncoder
LabelEncoder_x = LabelEncoder()

for i in range(0,5):
  X_train[:,i] = LabelEncoder_x.fit_transform(X_train[:,i].astype(str))
  X_train[:,7] = LabelEncoder_x.fit_transform(X_train[:,7])

X_train

Labelencoder_y = LabelEncoder()
y_train = Labelencoder_y.fit_transform(y_train)
y_train

for i in range(0,5):
  X_test[:,i] = LabelEncoder_x.fit_transform(X_test[:,i].astype(str))
  X_test[:,7] = LabelEncoder_x.fit_transform(X_test[:,7])

X_test

Labelencoder_y = LabelEncoder()
y_test = Labelencoder_y.fit_transform(y_test)
y_test

from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
X_train = ss.fit_transform(X_train)
X_test = ss.fit_transform(X_test)

from sklearn.ensemble import RandomForestClassifier
rf_clf = RandomForestClassifier()
rf_clf.fit(X_train, y_train)

# the values in y_pred tells us wether the loan was approved(0) or approved(1)
from sklearn import metrics
y_pred = rf_clf.predict(X_test)
print("Accuracy of Random Forest Classifier:", metrics.accuracy_score(y_test, y_pred))

y_pred

from sklearn.naive_bayes import GaussianNB
nb_clf = GaussianNB()
nb_clf.fit(X_train, y_train)

y_pred = nb_clf.predict(X_test)
print("Accuracy of Naive Bayes Classifier:", metrics.accuracy_score(y_test, y_pred))

y_pred

from sklearn.tree import DecisionTreeClassifier
dt_clf = DecisionTreeClassifier()
dt_clf.fit(X_train, y_train)

y_pred = dt_clf.predict(X_test)
print("Accuracy of Decision Tree Classifier:", metrics.accuracy_score(y_test, y_pred))

y_pred

from sklearn.neighbors import KNeighborsClassifier
knn_clf = KNeighborsClassifier()
knn_clf.fit(X_train, y_train)

y_pred = knn_clf.predict(X_test)
print("Accuracy of KNN Classifier:", metrics.accuracy_score(y_test, y_pred))

y_pred

